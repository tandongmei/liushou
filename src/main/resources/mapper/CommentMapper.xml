<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ls.mapper.CommentMapper" >
  <resultMap id="BaseResultMap" type="com.ls.model.Comment" >
    <constructor >
      <idArg column="comment_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="event_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="replay_user_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="replay_content" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="created_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="parent_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="is_show" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="read_flag" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="bei_reply_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    comment_id, event_id, replay_user_id, replay_content, created_time, parent_id, is_show, 
    read_flag, bei_reply_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from comment
    where comment_id = #{commentId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from comment
    where comment_id = #{commentId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.ls.model.Comment" >
    insert into comment (comment_id, event_id, replay_user_id, 
      replay_content, created_time, parent_id, 
      is_show, read_flag, bei_reply_id
      )
    values (#{commentId,jdbcType=INTEGER}, #{eventId,jdbcType=INTEGER}, #{replayUserId,jdbcType=INTEGER}, 
      #{replayContent,jdbcType=VARCHAR}, #{createdTime,jdbcType=TIMESTAMP}, #{parentId,jdbcType=INTEGER}, 
      #{isShow,jdbcType=INTEGER}, #{readFlag,jdbcType=INTEGER}, #{beiReplyId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.ls.model.Comment" >
    insert into comment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="commentId != null" >
        comment_id,
      </if>
      <if test="eventId != null" >
        event_id,
      </if>
      <if test="replayUserId != null" >
        replay_user_id,
      </if>
      <if test="replayContent != null" >
        replay_content,
      </if>
      <if test="createdTime != null" >
        created_time,
      </if>
      <if test="parentId != null" >
        parent_id,
      </if>
      <if test="isShow != null" >
        is_show,
      </if>
      <if test="readFlag != null" >
        read_flag,
      </if>
      <if test="beiReplyId != null" >
        bei_reply_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="commentId != null" >
        #{commentId,jdbcType=INTEGER},
      </if>
      <if test="eventId != null" >
        #{eventId,jdbcType=INTEGER},
      </if>
      <if test="replayUserId != null" >
        #{replayUserId,jdbcType=INTEGER},
      </if>
      <if test="replayContent != null" >
        #{replayContent,jdbcType=VARCHAR},
      </if>
      <if test="createdTime != null" >
        #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="parentId != null" >
        #{parentId,jdbcType=INTEGER},
      </if>
      <if test="isShow != null" >
        #{isShow,jdbcType=INTEGER},
      </if>
      <if test="readFlag != null" >
        #{readFlag,jdbcType=INTEGER},
      </if>
      <if test="beiReplyId != null" >
        #{beiReplyId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ls.model.Comment" >
    update comment
    <set >
      <if test="eventId != null" >
        event_id = #{eventId,jdbcType=INTEGER},
      </if>
      <if test="replayUserId != null" >
        replay_user_id = #{replayUserId,jdbcType=INTEGER},
      </if>
      <if test="replayContent != null" >
        replay_content = #{replayContent,jdbcType=VARCHAR},
      </if>
      <if test="createdTime != null" >
        created_time = #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="parentId != null" >
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="isShow != null" >
        is_show = #{isShow,jdbcType=INTEGER},
      </if>
      <if test="readFlag != null" >
        read_flag = #{readFlag,jdbcType=INTEGER},
      </if>
      <if test="beiReplyId != null" >
        bei_reply_id = #{beiReplyId,jdbcType=INTEGER},
      </if>
    </set>
    where comment_id = #{commentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ls.model.Comment" >
    update comment
    set event_id = #{eventId,jdbcType=INTEGER},
      replay_user_id = #{replayUserId,jdbcType=INTEGER},
      replay_content = #{replayContent,jdbcType=VARCHAR},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      parent_id = #{parentId,jdbcType=INTEGER},
      is_show = #{isShow,jdbcType=INTEGER},
      read_flag = #{readFlag,jdbcType=INTEGER},
      bei_reply_id = #{beiReplyId,jdbcType=INTEGER}
    where comment_id = #{commentId,jdbcType=INTEGER}
  </update>

  <!-- 自己的sql语句-->
  <select id="findParentCommentsByEventId"  parameterType="com.ls.request.CommentQueryRequest" resultType="com.ls.model.Comment">
    select c.comment_id commentId,
    c.event_id eventId,
    c.replay_user_id replayUserId,
    c.replay_content replayContent,
    c.created_time createdTime,
    c.parent_id parentId,
    c.is_show isShow,
    c.read_flag readFlag
    from `comment` c
    LEFT JOIN event e
    on c.event_id = e.event_id
    where c.parent_id = 0
    and e.event_id = #{eventId}
    order BY c.created_time desc
  </select>
  <select id="findReplayCommentsByCommentId" parameterType="com.ls.request.CommentQueryRequest" resultType="com.ls.model.Comment">
    select c.comment_id commentId,
    c.event_id eventId,
    c.replay_user_id replayUserId,
    c.replay_content replayContent,
    c.created_time created_time,
    c.parent_id parentId,
    c.is_show isShow,
    c.read_flag readFlag
    from `comment` c
    WHERE c.parent_id = #{commentId}
  </select>

  <select id="getCommentByEventId" parameterType="int" resultType="com.ls.model.Comment">
    select
    c.comment_id commentId,
    c.event_id eventId,
    c.replay_user_id replayUserId,
    c.replay_content replayContent,
    c.created_time createdTime,
    c.parent_id parentId,
    c.is_show isShow,
    c.read_flag readFlag
    from comment c
    where c.event_id=#{eventId}
    order BY c.created_time desc
  </select>

  <select id="getAllComment"  resultType="com.ls.model.Comment">
    select
    c.comment_id commentId,
    c.event_id eventId,
    c.replay_user_id replayUserId,
    c.replay_content replayContent,
    c.created_time createdTime,
    c.parent_id parentId,
    c.is_show isShow,
    c.read_flag readFlag
    from comment c
    order BY c.created_time desc
  </select>
  <select id="getAllCommentCount" parameterType="int" resultType="int">
    select count(*)
    from comment c
    where c.event_id = #{eventId}
  </select>

  <!--获取当前用户 当前事件下未读的评论或者回复-->
  <select id="getMyComment" parameterType="map" resultType="com.ls.model.Comment">
    select
    c.comment_id commentId,
    c.event_id eventId,
    c.replay_user_id replayUserId,
    c.replay_content replayContent,
    c.created_time createdTime,
    c.parent_id parentId,
    c.is_show isShow,
    c.read_flag readFlag,
    c.bei_reply_id beiReplyId
    from comment c
    where  c.read_flag=0 and c.bei_reply_id=#{userId}
    and c.event_id=#{eventId}
  </select>

  <!--批量更新未读的评论或者回复-->
  <update id="batchUpdateList" parameterType="list" >
    update comment c set c.read_flag=1
    where c.comment_id in
    <foreach collection="list" item="comment" open="(" close=")" separator=",">
      #{comment.commentId}
    </foreach>
  </update>

  <!--查看未读的评论或者回复-->
  <select id="getNoReadComment" parameterType="map" resultType="com.ls.model.Comment">
    select
    c.comment_id commentId,
    c.event_id eventId,
    c.replay_user_id replayUserId,
    c.replay_content replayContent,
    c.created_time createdTime,
    c.parent_id parentId,
    c.is_show isShow,
    c.read_flag readFlag,
    c.bei_reply_id beiReplyId
    from comment c
    where  c.read_flag=0 and c.bei_reply_id=#{userId}
    and
    <if test="flag==0">
      c.parent_id=0
    </if>
    <if test="flag==1">
      c.parent_id!=0
    </if>
    order BY c.created_time desc
  </select>

  <!--查看未读的评论或者回复的数量-->
  <select id="getNoReadCommentCount" parameterType="map" resultType="int">
    select count(1)
    from comment c
    where c.read_flag=0 and  c.bei_reply_id=#{userId}
    and
    <if test="flag==0">
      c.parent_id=0
    </if>
    <if test="flag==1">
      c.parent_id!=0
    </if>
  </select>
</mapper>